// Generated by CoffeeScript 1.10.0
(function() {
  describe("Metrics", function() {
    describe(".ratio()", function() {
      it("handles a 1:1 ratio", function() {
        return expect(Metrics.ratio(5, 5)).toBe(1);
      });
      it("handles a 1:2 ratio", function() {
        return expect(Metrics.ratio(3, 6)).toBe(0.5);
      });
      return it("handles a 3:2 ratio", function() {
        return expect(Metrics.ratio(9, 6)).toBe(1.5);
      });
    });
    describe(".effectiveness_desc()", function() {
      it("handles a range from 0 to 10", function() {
        expect(Metrics.effectiveness_desc(0)).toBe("in the weeds");
        expect(Metrics.effectiveness_desc(5)).toBe("treading water");
        return expect(Metrics.effectiveness_desc(10)).toBe("on top of it");
      });
      return it("throws an error when outside 0 to 10", function() {
        expect(function() {
          return Metrics.effectiveness_desc(15);
        }).toThrowError(RangeError);
        return expect(function() {
          return Metrics.effectiveness_desc(-1);
        }).toThrowError(RangeError);
      });
    });
    describe(".effectiveness()", function() {
      it("accepts four parameters & returns a number", function() {
        return expect(Metrics.effectiveness(1, 2, 3, 4)).toEqual(jasmine.any(Number));
      });
      return it("gives travel-project a 10", function() {
        return expect(Metrics.effectiveness(49, 0, 32, 0)).toBe(10);
      });
    });
    return describe(".scaled()", function() {
      it("converts 0 to 0", function() {
        return expect(Metrics.scaled(0)).toBe(0);
      });
      it("converts 0.1 to ~1", function() {
        return expect(Metrics.scaled(0.1)).toBeCloseTo(0.9, 1);
      });
      it("converts 1 to 5", function() {
        return expect(Metrics.scaled(1)).toBe(5);
      });
      it("converts 10 to 9", function() {
        return expect(Metrics.scaled(10)).toBeCloseTo(9, 0);
      });
      return it("converts infinity to 10", function() {
        return expect(Metrics.scaled(Infinity)).toBe(10);
      });
    });
  });

  describe("App.Repo", function() {
    return describe("constructor", function() {
      return it("parses a repo spec in acct/name form", function() {
        var nop, repo;
        nop = function() {};
        repo = new App.Repo('dogweather/naturally', nop, nop, false);
        expect(repo.name).toEqual('naturally');
        return expect(repo.acct).toEqual('dogweather');
      });
    });
  });

  describe("App.Github", function() {
    describe(".dateFormat()", function() {
      return it("returns a date in GitHub's prefered format", function() {
        var date;
        date = new Date(90000000000);
        return expect(App.Github.dateFormat(date)).toEqual('1972-11-07');
      });
    });
    describe(".padWithZeroes()", function() {
      it("prepends 0 to a single digit number", function() {
        return expect(App.Github.padWithZeroes(5, 2)).toEqual('05');
      });
      return it("leaves a double-digit number unchanged", function() {
        return expect(App.Github.padWithZeroes(12, 2)).toEqual('12');
      });
    });
    describe(".pageCount(apiResult)", function() {
      it("works on the first page", function() {
        var result;
        result = {
          lastPageUrl: "https://api.github.com/repositories/771016/issues?per_page=100&state=all&since=2015-11-24&page=3"
        };
        return expect(App.Github.pageCount(result)).toEqual(3);
      });
      it("works on the last page", function() {
        var result;
        result = {
          prevPageUrl: "https://api.github.com/repositories/771016/issues?per_page=100&state=all&since=2015-11-24&page=2"
        };
        return expect(App.Github.pageCount(result)).toEqual(3);
      });
      return it("works on the only page", function() {
        var result;
        result = {};
        return expect(App.Github.pageCount(result)).toEqual(1);
      });
    });
    return describe(".currentPage(apiResult)", function() {
      it("works on the first page", function() {
        var result;
        result = {
          nextPageUrl: "https://api.github.com/repositories/771016/issues?per_page=100&state=all&since=2015-11-24&page=2"
        };
        return expect(App.Github.currentPage(result)).toEqual(1);
      });
      it("works on the last page", function() {
        var result;
        result = {
          prevPageUrl: "https://api.github.com/repositories/771016/issues?per_page=100&state=all&since=2015-11-24&page=2"
        };
        return expect(App.Github.currentPage(result)).toEqual(3);
      });
      return it("works on the only page", function() {
        var result;
        result = {};
        return expect(App.Github.currentPage(result)).toEqual(1);
      });
    });
  });

}).call(this);
