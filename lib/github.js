// Generated by CoffeeScript 1.10.0
(function() {
  App.Github = (function() {
    function Github() {}

    Github.rateLimit = function(callback) {
      return App.octo.rateLimit.fetch(function(err, data) {
        if (err) {
          return console.log(err);
        } else {
          return callback({
            limit: data.rate.limit,
            remaining: data.rate.remaining,
            hasRemaining: function() {
              return data.rate.remaining > 0;
            }
          });
        }
      });
    };

    Github.oneMonthAgo = function() {
      var result;
      result = new Date;
      result.setMonth(result.getMonth() - 1);
      return this.dateFormat(result);
    };

    Github.dateFormat = function(aDate) {
      var day, month, year;
      year = aDate.getFullYear();
      month = this.padWithZeroes(aDate.getMonth() + 1, 2);
      day = this.padWithZeroes(aDate.getDate(), 2);
      return [year, month, day].join('-');
    };

    Github.padWithZeroes = function(num, size) {
      var s;
      s = num + "";
      while (s.length < size) {
        s = "0" + s;
      }
      return s;
    };

    Github.pageCount = function(apiResult) {
      var url;
      url = apiResult.lastPageUrl;
      if (typeof url === 'undefined') {
        url = apiResult.prevPageUrl;
        if (typeof url === 'undefined') {
          return 1;
        }
        return parseInt(url.match(/\d+$/)[0]) + 1;
      } else {
        return parseInt(url.match(/\d+$/)[0]);
      }
    };

    Github.currentPage = function(apiResult) {
      var url;
      url = apiResult.nextPageUrl;
      if (typeof url === 'undefined') {
        url = apiResult.prevPageUrl;
        if (typeof url === 'undefined') {
          return 1;
        }
        return parseInt(url.match(/\d+$/)[0]) + 1;
      } else {
        return parseInt(url.match(/\d+$/)[0]) - 1;
      }
    };

    return Github;

  })();

}).call(this);
